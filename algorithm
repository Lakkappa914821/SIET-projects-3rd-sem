# algorithm
#it is a step by step procedure to solve the particular problem

#
'''
the order of complexity of algorithems
1: being the fastest
2:being the slowest

1: O(1)
2: O(logn)
3: O(n)
4: O(n^2)
5: O(n^3)
6: O(n^k)
7: O(2^n)
8: O(n!)

 problem number 1: calculate the sum of two numbers
 algorithm
1. start
2. take two numbers as input
3. add the two numbers
4. output the result
5. end'''

'''def add_numbers():
  a = int(input("enter the first number"))
  b = int(input("enter the second number"))
  return a+b
print(add_numbers())'''

'''1. start_
2. take the inputs
3. perform floor div, store ans in one variable
4. print the result
5. end'''

def div():
  a = int(input("enter the first number"))
  b = int(input("enter the second number"))
  return a//b
print(div())


# problem statement: algrithm to find the maximum value in the list
'''steps:
1. start
2. take the input as list
3. finding the maximum value in the list
4: initialize the first element to be maximum element
5. loop through the entire list
6. compare the each element which the maximum with the next element in the list
7. if an element is found to be greater than the current maximum element
8. update the new maximum element
9. output the maximum value
10. end
'''

def find_max(numbers):
  max_value = numbers[0]
  for i in numbers:
    if i > max_value:
      max_value=i
  return max_value

print(find_max([3,7,14,1,2]))

# algorithm for factor
'''
1. start
2. take the value
3. if the number is 1 return 1
4. multiply the number by the number of (number-1)
5. end
'''
'''
def fact(n):
  if n==1:
    return 1
  else:
    return n * fact(n-1)
print(fact(5))

# problem statement: print the fibonacci series of the number of terms entered

1. start
2. take the n value
3. if n is less than or equal to 1 then we return the value of n
4. else if the value is more than 1 then we do fibonacci(n-1)+fibonacci(n-2)
5. print the output
6. end
'''
'''
def fib(n):
  if n<=1:
    return n
  else:
    return fib(n-1)+fib(n-2)
terms = int(input("enter the no of terms"))
if terms <= 0:
  print("enter the positive value")
else:
  print("the fibonacci series will be: ")
  for i in range(terms):
    print(fib(i))
'''
# algorithm for palindrome
'''
1. start
2. take the input as the string
3. reverse the entered string
4. compare the existing string the reversed string
5. if they are equal then we print that it is a palindrome
6. end
'''

'''def is_pall(word):
  reversed_word = word[ : :-1]
  if word==reversed_word:
    return True
  else:
    return False
print(is_pall("madam"))'''


def is_pall(word):
  reversed_word = word[ : :-1]
  if word == reversed_word:
    print("it is a palindrome")
  else:
    print("it is not a palindrome")
word = input("enter the name or number")
print(is_pall(word))

1. start
2. take an input as an array
3. consider two numbers and compare the first value with the adjucent value in the array
4. if the elements are in the wrong order than swap them
5. repeat untill no more swaps are needed
6. end

def bubble_sort(arr):
  n = len(arr)
  for i in range(n):
    for j in range(0,n-i-1):
      if arr[j] > arr[j+1]:
        arr[j],arr[j+1] = arr[j+1],arr[j]
  return arr
print(bubble_sort([7,14,1,6,20]))

# linear search: it is a straight forword algorithm that check each element in a list, one by one untill it finds the element we are a looking for

def lin_search(arr,target):
  for i in range(len(arr)):
    if arr[i] == target:
      return i # print(f"the element found at index number (i))
  return -1
numbers = [10,20,30,40,50]
print(lin_search(numbers,40))


def lin_search(arr,target):
  for i in range(len(arr)):
    if arr[i] == target:
      return i # print(f"the element found at index words (i))
  return -1
words = ["gaja","lakkappa","krish"]
print(lin_search(words,"lakkappa"))

# binary search:it is more efficient algorithm than linear bxity of O(logn) unlike linear which has a complexity of O(n)
# in binary search it reapeatedly devides the searching interval in half if the target value is less than the midpoint
# we go to the left side if it is more than the midpoint we go to the right and find for the target value


def bin_search(arr,target):
  left = 0
  right = len(arr) - 1
  while left <= right:
    mid = (left + right) // 2
    if arr[mid]== target:
      return mid
    elif arr[mid] < target:
      left = mid
    else:
      right = mid - 1
  return -1
numbers = [10,20,30,40,50]
print(bin_search(numbers,40))
